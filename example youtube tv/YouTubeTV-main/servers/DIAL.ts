/**
 * DIAL protocol specification: http://www.dial-multiscreen.org/dial-protocol-specification
 * @author Marcos Rodríguez Yélamo <marcosylrg@gmail.com>
 * @license MIT
 */

import { hostname, platform } from 'os'

import { Server } from 'peer-dial';
import express, { Express } from 'express';

import process from '../main';
import { Apps } from '../models/dial.interface';
import { randomInt } from 'crypto';

export class Dial {

    /** Stores allowed apps */
    private apps: Apps;
    /** Stores the DIAL server */
    private server: Server;
    /** Stores the express application server. */
    private exServer: Express = express();
    /** Stores the server port */
    private port: number;

    /**
     * Instantiate a new DIAL server.
     */
    constructor() {

        // Basic DIAL server configuration.
        this.apps = {
            "YouTube": {
                name: 'YouTube',
                state: 'stopped',
                allowStop: true,
                pid: '',
                launch: this.launch.bind(this)
            }
        }

        this.server = new Server({
            expressApp: this.exServer,
            manufacturer: 'YouTube',
            modelName: 'YouTube TV',
            port: this.getRandomPort(),
            prefix: '/dial',
            corsAllowOrigins: '*',
            friendlyName: this.getFriendlyName(),
            delegate: {
                getApp: (appName: string) => {
                    return this.apps[appName];
                },
                launchApp: this.onLaunch.bind(this),
                stopApp: this.onStop.bind(this)
            }
        })

        this.listen();
        
    }

    /**
     * Fires when device connects to the DIAL server.
     * @param appName application name (YouTube TV, obviously)
     * @param launchData url for synchronization with the device.
     */
    private onLaunch(appName: string, launchData: string, callback: (data: string) => void) {

        // Get the app from the apps list.
        const app = this.apps[appName];

        if (app) {
            app.pid = 'run';
            app.state = 'starting';
            // Interacts with the main renderer.
            app.launch(launchData);
            app.state = 'running';

            callback(app.pid);
        } else {
            // Can this happen? YouTube is the only app allowed...
            debugger;
            throw new Error(`App ${appName} not found.`);
        }
    }

    /**
     * Fires when device disconnects from the DIAL server.
     * @param appName application name.
     * @param pid pid of the app.
     * @param callback Executes disconnection.
     */
    private onStop(appName: string, pid: string, callback: (data: boolean) => void) {

        const app = this.apps[appName];

        if (app && app.pid === pid) {
            app.pid = '';
            app.state = 'stopped';
            // Disconnects from device.
            callback(true);
        } else {
            // Im not sure if this can happen. Debug it.
            callback(false);
        }
    }

    /** Handle new user connection to the DIAL server. */
    private launch(launchData: string) {

        // Sets DIAL launchData url segment in the main renderer.
        process.renderer.urlByDial = launchData;

    }

    /**
     * Start listening to DIAL requests.
     * @param port port number.
     */
    private listen(port: number = this.port) {

        this.exServer.listen(port, () => {
            this.server.start();
        })
        .on('error', (err: NodeJS.ErrnoException) => {
            if (err.code === 'EADDRINUSE') {
                this.listen(randomInt(1081, 65534));
            }
        })

    }

    /**
     * Generate a random port number and save it to the port property.
     * */
    private getRandomPort() {
        // Generated by GitHub Copilot.
        const port = Math.floor(Math.random() * (65535 - 1024)) + 1024;
        this.port = port;
        return port;
    }

    /** Generate a friendly name for the server. */
    private getFriendlyName() {
        let hname = hostname();

        if (hname.includes('.local')) {
            hname = hname.replace('.local', '');
        }

        // e.g. "Marco's-MacBook-Pro" converted to "Marco's MacBook Pro (
        if (platform() === 'darwin') {
            while(hname.includes('-')) {
                hname = hname.replace('-', ' ');
            }
        }

        // Returns a name like "YouTube on Marco's MacBook Pro"
        return `YouTube TV on ${hname}`;
    }
}